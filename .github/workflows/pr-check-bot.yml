name: PR Check Bot

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read

jobs:
  pr-check-bot:
    # Only run on pull request comments with "bot, check"
    if: github.event.issue.pull_request && contains(github.event.comment.body, 'bot, check')
    runs-on: ubuntu-latest
    
    steps:
    - name: React to comment
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const { comment } = context.payload;
          
          await github.rest.reactions.createForIssueComment({
            owner,
            repo,
            comment_id: comment.id,
            content: 'rocket'
          });

    - name: Get PR info
      id: pr-info
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const issueNumber = context.issue.number;
          
          const { data: pr } = await github.rest.pulls.get({
            owner,
            repo,
            pull_number: issueNumber
          });
          
          console.log(`PR #${pr.number}: ${pr.title}`);
          console.log(`Author: ${pr.user.login}`);
          console.log(`Head SHA: ${pr.head.sha}`);
          
          core.setOutput('pr_number', pr.number);
          core.setOutput('pr_title', pr.title);
          core.setOutput('pr_author', pr.user.login);
          core.setOutput('head_sha', pr.head.sha);
          core.setOutput('head_ref', pr.head.ref);

    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: refs/pull/${{ github.event.issue.number }}/head
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Post initial status
      id: initial-comment
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const issueNumber = context.issue.number;
          
          const prNumber = '${{ steps.pr-info.outputs.pr_number }}';
          const author = '${{ steps.pr-info.outputs.pr_author }}';
          const runId = '${{ github.run_id }}';
          const repoUrl = `https://github.com/${owner}/${repo}`;
          const actionUrl = `${repoUrl}/actions/runs/${runId}`;
          
          const message = `## ü§ñ PR Check Bot Started

          Running comprehensive checks for PR #${prNumber} by @${author}

          ### üìä Check Status:
          - ‚ö†Ô∏è **PR Requirements**: Validating title, description, checklist
          - ‚ö†Ô∏è **CONTRIBUTING.md**: Checking for unauthorized changes
          - ‚ö†Ô∏è **Style Check**: Analyzing Python code style and headers
          - ‚ö†Ô∏è **Documentation**: Building docs if relevant files changed
          
          *Running all checks... This message will be updated with results.*
          
          üîó **[Watch all checks run live](${actionUrl})** - View real-time progress, full error details, and complete logs`;
          
          const { data: comment } = await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: issueNumber,
            body: message
          });
          
          core.setOutput('comment_id', comment.id);

    # CHECK 1: PR Requirements (from pr-requirements-check.yml)
    - name: 1Ô∏è‚É£ PR Requirements Check
      id: pr-requirements
      uses: actions/github-script@v7
      with:
        script: |
          console.log('üîç Starting PR Requirements Check...');
          
          const { owner, repo } = context.repo;
          const issueNumber = context.issue.number;
          
          const { data: pr } = await github.rest.pulls.get({
            owner,
            repo,
            pull_number: issueNumber
          });

          const title = pr.title;
          const body = pr.body || '';
          
          let errors = [];
          let warnings = [];

          // Check 1: PR Title Guidelines
          const titlePatterns = [
            /^Added .+: .+$/,
            /^Bug Fix .+: .+$/,
            /^Updated .+: .+$/,
            /^Documentation: .+$/
          ];
          
          const titleValid = titlePatterns.some(pattern => pattern.test(title));
          if (!titleValid) {
            console.log('‚ùå PR Title check failed');
            console.log(`Current title: "${title}"`);
            errors.push('‚ùå **PR Title**: Title does not follow the required format. Please use one of:\n' +
                       '   - "Added [word]: [description]" - for new features\n' +
                       '   - "Bug Fix [word]: [description]" - for bug fixes\n' +
                       '   - "Updated [word]: [description]" - for updates\n' +
                       '   - "Documentation: [description]" - for documentation only');
          } else {
            console.log('‚úÖ PR Title format is correct');
          }

          // Check 2: Description has content
          console.log('üîç Checking description...');
          const descriptionSection = body.match(/## Description\s*\n.*?\n(.*?)(?=\n##|$)/s);
          let description = descriptionSection ? descriptionSection[1].trim() : '';
          description = description.replace(/<!--[\s\S]*?-->/g, '').trim();
          
          if (!description || description.length < 1 || description.match(/^\s*$/)) {
            console.log('‚ùå Description check failed - no content found');
            errors.push('‚ùå **Description**: Please provide a description of your changes in the Description section.');
          } else {
            console.log('‚úÖ Description provided');
          }

          // Check 3: Type of Change box checked
          console.log('üîç Checking Type of Change...');
          const typeOfChangeSection = body.match(/## Type of Change.*?\n(.*?)(?=\n##|$)/s);
          const typeOfChangeChecked = typeOfChangeSection && (typeOfChangeSection[1].includes('- [x]') || typeOfChangeSection[1].includes('- [X]'));
          
          if (!typeOfChangeChecked) {
            console.log('‚ùå Type of Change check failed');
            errors.push('‚ùå **Type of Change**: Please check at least one box in the "Type of Change" section.');
          } else {
            console.log('‚úÖ Type of Change selected');
          }

          // Check 4: Checklist items checked
          console.log('üîç Checking Checklist...');
          const checklistSection = body.match(/## Checklist.*?\n(.*?)(?=\n##|$)/s);
          if (checklistSection) {
            const checklistItems = checklistSection[1].match(/- \[[ xX]\]/g) || [];
            const checkedItems = checklistSection[1].match(/- \[[xX]\]/g) || [];
            
            console.log(`Found ${checklistItems.length} checklist items, ${checkedItems.length} checked`);
            
            if (checklistItems.length === 0) {
              console.log('‚ö†Ô∏è No checklist items found');
              warnings.push('‚ö†Ô∏è **Checklist**: No checklist items found.');
            } else if (checkedItems.length < checklistItems.length) {
              const uncheckedCount = checklistItems.length - checkedItems.length;
              console.log(`‚ùå Checklist check failed - ${uncheckedCount} items unchecked`);
              errors.push(`‚ùå **Checklist**: ${uncheckedCount} checklist item(s) not checked off. Please complete all checklist items.`);
            } else {
              console.log('‚úÖ All checklist items completed');
            }
          } else {
            console.log('‚ö†Ô∏è Checklist section not found');
            warnings.push('‚ö†Ô∏è **Checklist**: Checklist section not found.');
          }

          // Set outputs with better error handling
          console.log('Errors found:', errors.length);
          console.log('Warnings found:', warnings.length);
          
          // Store counts instead of complex JSON to avoid parsing issues
          core.setOutput('error_count', errors.length);
          core.setOutput('warning_count', warnings.length);
          core.setOutput('passed', errors.length === 0);
          
          // Store first error message if any (for simple display)
          if (errors.length > 0) {
            core.setOutput('first_error', errors[0].substring(0, 200));
          } else {
            core.setOutput('first_error', '');
          }
          
          console.log(`PR Requirements: ${errors.length} errors, ${warnings.length} warnings`);

    # CHECK 2: CONTRIBUTING.md Check (from contributing-checker.yml)
    - name: Get changed files for CONTRIBUTING.md check
      id: contributing-files
      uses: tj-actions/changed-files@v41
      with:
        files_yaml: |
          contributing:
            - CONTRIBUTING.md
          style_workflow:
            - .github/workflows/style-requirement.yml

    - name: 2Ô∏è‚É£ CONTRIBUTING.md Check
      id: contributing-check
      run: |
        echo "üîç Starting CONTRIBUTING.md Check..."
        
        CONTRIBUTING_CHANGED="${{ steps.contributing-files.outputs.contributing_changed }}"
        
        if [ "$CONTRIBUTING_CHANGED" == "true" ]; then
          echo "‚ùå CONTRIBUTING.md was modified - requires admin approval"
          echo "blocked=true" >> $GITHUB_OUTPUT
          echo "passed=false" >> $GITHUB_OUTPUT
          
          # Create detailed error message (single line to avoid syntax issues)
          ERROR_MSG="CONTRIBUTING.md was modified - requires administrator review and approval before merging. This PR is blocked until admin approves."
          
          echo "error_message<<EOF" >> $GITHUB_OUTPUT
          echo "$ERROR_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ CONTRIBUTING.md was not modified"
          echo "blocked=false" >> $GITHUB_OUTPUT
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "error_message=" >> $GITHUB_OUTPUT
        fi

    # CHECK 3: Style Check (from style-requirement.yml)
    - name: Get changed Python files
      id: python-files
      uses: tj-actions/changed-files@v41
      with:
        files: |
          **/*.py
        files_ignore: |
          .github/workflows/**
          __pycache__/**
          *.pyc
          build/**
          dist/**

    - name: 3Ô∏è‚É£ Style Check
      id: style-check
      if: steps.python-files.outputs.any_changed == 'true'
      run: |
        echo "üîç Starting Style Check..."
        echo "üé® Running style check on changed Python files..."
        echo "Changed files: ${{ steps.python-files.outputs.all_changed_files }}"
        
        if [ -f ".github/scripts/enhanced_style_checker.py" ]; then
          chmod +x .github/scripts/enhanced_style_checker.py
          
          # Capture both exit code and output
          set +e
          OUTPUT=$(python3 .github/scripts/enhanced_style_checker.py ${{ steps.python-files.outputs.all_changed_files }} 2>&1)
          STYLE_EXIT_CODE=$?
          set -e
          
          echo "Style checker output:"
          echo "$OUTPUT"
          
          if [ $STYLE_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Style check passed"
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "error_message=" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Style check failed with exit code $STYLE_EXIT_CODE"
            echo "passed=false" >> $GITHUB_OUTPUT
            
            ERROR_MSG="Style Check Failed: Python files don't meet styling requirements. Check for missing BSD headers, docstrings, or incomplete documentation. See CONTRIBUTING.md for full style guide."
            
            echo "error_message<<EOF" >> $GITHUB_OUTPUT
            echo "$ERROR_MSG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
          echo "exit_code=$STYLE_EXIT_CODE" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Style checker script not found"
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "exit_code=0" >> $GITHUB_OUTPUT
          echo "error_message=" >> $GITHUB_OUTPUT
        fi

    - name: 3Ô∏è‚É£ Style Check - No Python files
      id: style-check-skipped
      if: steps.python-files.outputs.any_changed != 'true'
      run: |
        echo "‚úÖ No Python files changed - style check skipped"
        echo "passed=true" >> $GITHUB_OUTPUT
        echo "exit_code=0" >> $GITHUB_OUTPUT
        echo "error_message=" >> $GITHUB_OUTPUT

    # CHECK 4: Documentation Build (from docs.yml)
    - name: Get documentation related files
      id: docs-files
      uses: tj-actions/changed-files@v41
      with:
        files: |
          docs/**
          modules/**
          GUI/**

    - name: 4Ô∏è‚É£ Documentation Build Check
      id: docs-check
      if: steps.docs-files.outputs.any_changed == 'true'
      run: |
        echo "üîç Starting Documentation Build Check..."
        echo "üìö Documentation-related files changed, building docs..."
        
        # Initialize tracking
        ALL_PASSED=true
        ERROR_DETAILS=""
        
        # Install dependencies
        echo "Installing documentation dependencies..."
        cd docs
        if pip install -r requirements.txt; then
          echo "‚úÖ Dependencies installed successfully"
        else
          echo "‚ùå Failed to install dependencies"
          ALL_PASSED=false
          ERROR_DETAILS="$ERROR_DETAILS- Failed to install documentation dependencies\n"
        fi
        
        # Generate CLI documentation
        echo "üìñ Generating CLI documentation..."
        if python generate_cli_docs.py; then
          echo "‚úÖ CLI documentation generated successfully"
        else
          echo "‚ùå Failed to generate CLI documentation"
          ALL_PASSED=false
          ERROR_DETAILS="$ERROR_DETAILS- Failed to generate CLI documentation\n"
        fi
        
        # Generate API documentation
        echo "üìù Generating API documentation..."
        if python generate_api_docs.py; then
          echo "‚úÖ API documentation generated successfully"
        else
          echo "‚ùå Failed to generate API documentation"
          ALL_PASSED=false
          ERROR_DETAILS="$ERROR_DETAILS- Failed to generate API documentation\n"
        fi
        
        # Generate GUI documentation
        echo "üñ•Ô∏è Generating GUI documentation..."
        if python generate_gui_docs.py; then
          echo "‚úÖ GUI documentation generated successfully"
        else
          echo "‚ùå Failed to generate GUI documentation"
          ALL_PASSED=false
          ERROR_DETAILS="$ERROR_DETAILS- Failed to generate GUI documentation\n"
        fi
        
        # Build Sphinx documentation
        echo "üèóÔ∏è Building Sphinx documentation..."
        if sphinx-build -b html source build/html; then
          echo "‚úÖ Sphinx documentation built successfully"
        else
          echo "‚ùå Failed to build Sphinx documentation"
          ALL_PASSED=false
          ERROR_DETAILS="$ERROR_DETAILS- Failed to build Sphinx documentation\n"
        fi
        
        # Set outputs
        if [ "$ALL_PASSED" = true ]; then
          echo "‚úÖ All documentation builds passed"
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "error_message=" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Some documentation builds failed"
          echo "passed=false" >> $GITHUB_OUTPUT
          
          ERROR_MSG="Documentation Build Failed: Some documentation generation steps failed. Please check documentation source files and dependencies."
          
          echo "error_message<<EOF" >> $GITHUB_OUTPUT
          echo "$ERROR_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: 4Ô∏è‚É£ Documentation Build - No relevant files
      id: docs-check-skipped
      if: steps.docs-files.outputs.any_changed != 'true'
      run: |
        echo "‚úÖ No documentation-related files changed - docs build skipped"
        echo "passed=true" >> $GITHUB_OUTPUT
        echo "error_message=" >> $GITHUB_OUTPUT

    # FINAL RESULTS
    - name: Generate final results
      uses: actions/github-script@v7
      env:
        CONTRIBUTING_ERROR: ${{ steps.contributing-check.outputs.error_message }}
        STYLE_ERROR: ${{ steps.style-check.outputs.error_message }}
        DOCS_ERROR: ${{ steps.docs-check.outputs.error_message }}
      with:
        script: |
          const { owner, repo } = context.repo;
          
          const commentId = '${{ steps.initial-comment.outputs.comment_id }}';
          const prNumber = '${{ steps.pr-info.outputs.pr_number }}';
          const author = '${{ steps.pr-info.outputs.pr_author }}';
          const runId = '${{ github.run_id }}';
          const repoUrl = `https://github.com/${owner}/${repo}`;
          const actionUrl = `${repoUrl}/actions/runs/${runId}`;
          
          // Collect results from all checks (using environment variables for error messages)
          const checks = [
            {
              name: 'PR Requirements',
              passed: '${{ steps.pr-requirements.outputs.passed }}' === 'true',
              errorCount: '${{ steps.pr-requirements.outputs.error_count }}',
              warningCount: '${{ steps.pr-requirements.outputs.warning_count }}',
              firstError: '${{ steps.pr-requirements.outputs.first_error }}'
            },
            {
              name: 'CONTRIBUTING.md Check',
              passed: '${{ steps.contributing-check.outputs.passed }}' === 'true',
              errorMessage: process.env.CONTRIBUTING_ERROR || ''
            },
            {
              name: 'Style Check',
              passed: ('${{ steps.style-check.outputs.passed }}' === 'true' || '${{ steps.style-check-skipped.outputs.passed }}' === 'true'),
              errorMessage: process.env.STYLE_ERROR || ''
            },
            {
              name: 'Documentation Build',
              passed: ('${{ steps.docs-check.outputs.passed }}' === 'true' || '${{ steps.docs-check-skipped.outputs.passed }}' === 'true'),
              errorMessage: process.env.DOCS_ERROR || ''
            }
          ];
          
          // Generate final message
          let message = `## ü§ñ PR Check Bot Results

          Completed comprehensive checks for PR #${prNumber} by @${author}

          ### üìä Final Results:
          `;
          
          let allPassed = true;
          let failedChecks = [];
          let passedChecks = [];
          
          for (const check of checks) {
            if (check.passed) {
              message += `- ‚úÖ **${check.name}**: **PASSED** ([view logs](${actionUrl}))\n`;
              passedChecks.push(check.name);
            } else {
              message += `- ‚ùå **${check.name}**: **FAILED** ([view logs](${actionUrl}))\n`;
              failedChecks.push(check.name);
              allPassed = false;
            }
          }
          
          // Add detailed error messages for failed checks
          if (!allPassed) {
            message += '\n### üö® Detailed Error Reports:\n\n';
            
            for (const check of checks) {
              if (!check.passed) {
                message += `#### ${check.name}\n`;
                
                // Handle PR Requirements check (has error/warning counts)
                if (check.name === 'PR Requirements') {
                  if (check.errorCount && parseInt(check.errorCount) > 0) {
                    message += `Found ${check.errorCount} error(s)`;
                    if (check.firstError) {
                      message += `\n\nFirst error: ${check.firstError}`;
                      if (check.firstError.length >= 200) {
                        message += '... (truncated)';
                      }
                    }
                    message += '\n\n';
                  }
                  if (check.warningCount && parseInt(check.warningCount) > 0) {
                    message += `Found ${check.warningCount} warning(s)\n\n`;
                  }
                }
                
                // Handle other checks (have error messages)
                if (check.errorMessage && check.errorMessage.trim()) {
                  message += `${check.errorMessage}\n\n`;
                }
              }
            }
          }
          
          message += '\n---\n\n';
          
          // Summary
          if (allPassed) {
            message += `üéâ **All ${passedChecks.length} checks passed!** This PR is ready for review.\n\n`;
            message += `üîó **[View the full action run](${actionUrl})** to see detailed check results and logs.\n\n`;
          } else {
            message += `‚ö†Ô∏è **${failedChecks.length} check(s) failed, ${passedChecks.length} passed.**\n\n`;
            message += `**Failed:** ${failedChecks.join(', ')}\n`;
            message += `**Passed:** ${passedChecks.join(', ')}\n\n`;
            message += 'Please address the issues above and run `bot, check` again.\n\n';
            message += `üîç **Need more details?** [View the full action run](${actionUrl}) for complete error messages, logs, and debugging information.\n\n`;
          }
          
          message += '*To re-run all checks, comment: `bot, check`*';
          
          // Update the original comment
          await github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: commentId,
            body: message
          });
          
          // Set final job status without failing the workflow
          if (!allPassed) {
            console.log(`‚ùå ${failedChecks.length} check(s) failed: ${failedChecks.join(', ')}`);
            console.log(`‚úÖ ${passedChecks.length} check(s) passed: ${passedChecks.join(', ')}`);
            // Note: We don't call core.setFailed() here so the workflow shows as successful
            // but the comment clearly shows what failed
          } else {
            console.log(`‚úÖ All ${passedChecks.length} checks passed successfully`);
          }
