name: Style Checker

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  issues: write
  pull-requests: write

jobs:
  style-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Get changed Python files
      id: changed-files
      uses: tj-actions/changed-files@v41
      with:
        files: |
          **/*.py
    
    - name: Check styling requirements
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        # Create style checker script
        cat > style_checker.py << 'EOF'
        #!/usr/bin/env python3
        """
        Style checker for Walrio project
        Checks BSD header and docstring requirements per CONTRIBUTING.md
        """
        
        import ast
        import sys
        import re
        from pathlib import Path
        
        def check_bsd_header(file_content, filename):
            """Check if file has required BSD-3-Clause header."""
            required_elements = [
                "Copyright (c) 2025 TAPS OSS",
                "Project: https://github.com/TAPSOSS/Walrio",
                "Licensed under the BSD-3-Clause License"
            ]
            
            # Check first 20 lines for header
            lines = file_content.split('\n')[:20]
            header_text = '\n'.join(lines)
            
            missing = []
            for element in required_elements:
                if element not in header_text:
                    missing.append(element)
            
            if missing:
                print(f"‚ùå {filename}: Missing required header elements:")
                for item in missing:
                    print(f"   - {item}")
                return False
            else:
                print(f"‚úÖ {filename}: BSD header check passed")
                return True
        
        def check_docstrings(file_content, filename):
            """Check if functions have proper docstrings with Args/Returns."""
            try:
                tree = ast.parse(file_content)
            except SyntaxError as e:
                print(f"‚ùå {filename}: Syntax error - {e}")
                return False
            
            issues = []
            
            def visit_function_or_class(node, node_type):
                """Check docstring for function or class."""
                if not ast.get_docstring(node):
                    issues.append(f"   - {node_type} '{node.name}' (line {node.lineno}) missing docstring")
                    return
                
                docstring = ast.get_docstring(node)
                
                # For functions, check for Args/Returns if they have parameters/return
                if isinstance(node, ast.FunctionDef):
                    # Only check for Args if function has actual parameters (excluding 'self')
                    params = [arg.arg for arg in node.args.args if arg.arg != 'self']
                    has_params = len(params) > 0
                    has_return = any(isinstance(n, ast.Return) and n.value for n in ast.walk(node))
                    
                    if has_params and "Args:" not in docstring and "Parameters:" not in docstring:
                        issues.append(f"   - Function '{node.name}' (line {node.lineno}) has parameters but no 'Args:' section in docstring")
                    
                    if has_return and "Returns:" not in docstring and "Return:" not in docstring:
                        issues.append(f"   - Function '{node.name}' (line {node.lineno}) has return statements but no 'Returns:' section in docstring")
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    visit_function_or_class(node, "Function")
                elif isinstance(node, ast.ClassDef):
                    visit_function_or_class(node, "Class")
            
            if issues:
                print(f"‚ùå {filename}: Docstring issues found:")
                for issue in issues:
                    print(issue)
                return False
            else:
                print(f"‚úÖ {filename}: Docstring check passed")
                return True
        
        def main():
            if len(sys.argv) < 2:
                print("Usage: python style_checker.py <file1.py> [file2.py ...]")
                sys.exit(1)
            
            all_passed = True
            failed_files = []
            
            for filename in sys.argv[1:]:
                print(f"\nüîç Checking {filename}...")
                
                try:
                    with open(filename, 'r', encoding='utf-8') as f:
                        content = f.read()
                except Exception as e:
                    print(f"‚ùå {filename}: Could not read file - {e}")
                    all_passed = False
                    failed_files.append(f"{filename} (read error)")
                    continue
                
                # Check BSD header
                header_ok = check_bsd_header(content, filename)
                
                # Check docstrings
                docstring_ok = check_docstrings(content, filename)
                
                if not (header_ok and docstring_ok):
                    all_passed = False
                    failure_reasons = []
                    if not header_ok:
                        failure_reasons.append("header")
                    if not docstring_ok:
                        failure_reasons.append("docstrings")
                    failed_files.append(f"{filename} ({', '.join(failure_reasons)})")
            
            if all_passed:
                print(f"\nüéâ All files passed styling requirements!")
                print("üìñ For detailed requirements, see: https://github.com/TAPSOSS/Walrio/blob/main/CONTRIBUTING.md#styling-requirements")
            else:
                print(f"\n‚ùå Some files failed styling requirements")
                print(f"\nüìã Failed files:")
                for failed_file in failed_files:
                    print(f"   - {failed_file}")
                print("üìñ Please review: https://github.com/TAPSOSS/Walrio/blob/main/CONTRIBUTING.md#styling-requirements")
                print("\nüìã Required BSD Header format:")
                print('"""')
                print("(Basic summary of function, 5 words max)")
                print("Copyright (c) 2025 TAPS OSS") 
                print("Project: https://github.com/TAPSOSS/Walrio")
                print("Licensed under the BSD-3-Clause License (see LICENSE file for details)")
                print("")
                print("(longer description of what the file actually does)")
                print('"""')
                sys.exit(1)
        
        if __name__ == "__main__":
            main()
        EOF
        
        # Make executable
        chmod +x style_checker.py
        
        # Run style check on changed Python files
        echo "üöÄ Running style check on changed Python files..."
        echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
        
        python3 style_checker.py ${{ steps.changed-files.outputs.all_changed_files }}
    
    - name: Comment on PR
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Style Check Failed')
          );
          
          const commentBody = `## üîç Style Check Failed
          
          Some files in your pull request don't meet the styling requirements defined in [CONTRIBUTING.md](https://github.com/TAPSOSS/Walrio/blob/main/CONTRIBUTING.md#styling-requirements).
          
          ### Required fixes:
          - ‚úÖ **BSD Header**: Every Python file must have the exact header format with copyright notice
          - ‚úÖ **Docstrings**: Every function/class needs docstrings with Args/Returns sections (if applicable)
          - ‚úÖ **Sphinx Format**: Use Napoleon-style docstrings for auto-documentation
          
          ### Quick fixes:
          1. Add the required BSD header to the top of each Python file
          2. Add docstrings to any functions or classes missing them
          3. Include \`Args:\` and \`Returns:\` sections in function docstrings
          
          üìñ **Full requirements**: [CONTRIBUTING.md - Styling Requirements](https://github.com/TAPSOSS/Walrio/blob/main/CONTRIBUTING.md#styling-requirements)
          
          Once you fix these issues, the check will automatically re-run when you push your changes.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }